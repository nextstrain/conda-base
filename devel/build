#!/bin/bash
set -euo pipefail
shopt -s extglob

source "$(dirname "$0")/_common"
cd "$repo"

main() {
    # First things first: set PATH early so everything that follows has the dev
    # env available.
    export PATH="$env/bin:$PATH"
    export VERSION="${VERSION:-$(./devel/generate-version)}"

    # Set CONDA_SUBDIR unless it's already set.
    CONDA_SUBDIR="${CONDA_SUBDIR:-$(./devel/conda-subdir)}"
    export CONDA_SUBDIR

    # Set CONDA_OVERRIDE_ARCHSPEC if it's unset or empty.
    if [[ -z "${CONDA_OVERRIDE_ARCHSPEC:-}" ]]; then
        # Unset CONDA_OVERRIDE_ARCHSPEC if it's set but empty.  An empty
        # archspec override *omits* the virtual __archspec package from
        # solving, and we don't want to do that.
        unset CONDA_OVERRIDE_ARCHSPEC

        case "$CONDA_SUBDIR" in
            linux-64|osx-64)
                # Avoid x86_64-microarch-level versions >1 for greatest
                # compatibility
                export CONDA_OVERRIDE_ARCHSPEC=x86_64;;

            # Other subdirs use their default.
        esac
    fi

    # Set CONDA_OVERRIDE_GLIBC if it's unset or empty.
    if [[ -z "${CONDA_OVERRIDE_GLIBC:-}" ]]; then
        case "$CONDA_SUBDIR" in
            linux-64)
                # Support glibc 2.17 for greatest compatibility
                export CONDA_OVERRIDE_GLIBC=2.17;;
        esac
    fi

    clean
    build src "$@"
}

clean() {
    log "Removing $repo/build"
    rm -rf ./build
}

build() {
    local recipe_dir="$1"
    shift

    log "Building $repo/$recipe_dir into $repo/build"

    # Lie about HOME so we can configure channels properly for the build via
    # .condarc and isolate ourselves from the user's own .condarc.
    HOME="$repo" conda build \
       --package-format conda \
       --croot ./build \
       "$recipe_dir" \
       "$@"
}

main "$@"
