#!/bin/bash
set -euo pipefail
shopt -s extglob

source "$(dirname "$0")/_common"
cd "$repo"

main() {
    # First things first: set PATH early so everything that follows has the dev
    # env available.
    export PATH="$env/bin:$PATH"
    export VERSION="${VERSION:-$(./devel/generate-version)}"

    # Set CONDA_SUBDIR unless it's already set.
    CONDA_SUBDIR="${CONDA_SUBDIR:-$(./devel/conda-subdir)}"
    export CONDA_SUBDIR

    # Set CONDA_OVERRIDE_ARCHSPEC if it's unset or empty.
    if [[ -z "${CONDA_OVERRIDE_ARCHSPEC:-}" ]]; then
        # Unset CONDA_OVERRIDE_ARCHSPEC if it's set but empty.  An empty
        # archspec override *omits* the virtual __archspec package from
        # solving, and we don't want to do that.
        unset CONDA_OVERRIDE_ARCHSPEC

        case "$CONDA_SUBDIR" in
            linux-64|osx-64)
                # Avoid x86_64-microarch-level versions >1 for greatest
                # compatibility
                export CONDA_OVERRIDE_ARCHSPEC=x86_64;;

            # Other subdirs use their default.
        esac
    fi

    clean
    build src
    lock
    build locked
}

clean() {
    log "Removing $repo/build and $repo/locked"
    rm -rf ./build ./locked
}

build() {
    local recipe_dir="$1"
    shift

    log "Building $repo/$recipe_dir into $repo/build/$recipe_dir"

    # Boa's configuration framework is not quite fully-baked: it's only minimally
    # configurable with env vars and reads only ~/.condarc, no other RC files.  Lie
    # about HOME so we can configure channels properly for the build.
    HOME="$repo" boa build --pkg-format 2 --croot "./build/$recipe_dir" "$recipe_dir" "$@"
}

lock() {
    log "Copying $repo/src to $repo/locked"
    cp -a src locked

    # XXX TODO: It would be extra nice to prepend channel specifiers to each
    # locked dep (e.g. conda-forge::nextstrain-cli ==x.y.z hbadcafe_0_locked).
    # Boa has that info at build time, but it doesn't seem to make it into the
    # rendered recipe included in the package.  Would have to reach into Boa
    # somehow or leverage libmamba directly to obtain itâ€¦
    #   -14 Oct 2022
    log "Updating $repo/locked/recipe.yaml"
    yq \
        --yaml-roundtrip \
        --slurpfile rendered <(rendered-recipe | yaml-to-json) \
        '
              .package.version = $rendered[0].package.version
            | .build.string = $rendered[0].build.string + "_locked"
            | .requirements.run = (
                  $rendered[0].requirements.run
                | map(split(" ") | "\(.[0]) ==\(.[1]) \(.[2])"))
        ' \
        < src/recipe.yaml \
        > locked/recipe.yaml
}

rendered-recipe() {
    # It would be really nice if we could use `boa render` (or `conda render`)
    # for this, but we can't seem to.  Instead, extract the rendered recipe
    # from the package built in the first pass.
    local package="$(echo ./build/src/*/nextstrain-base-"$VERSION"-!(*_locked).conda)"
    ./devel/extract-pkg-info "$package" recipe/recipe.yaml
}

yaml-to-json() {
    yq '.'
}

main "$@"
